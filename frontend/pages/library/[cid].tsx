import Img from "../../components/image"
import Footer from "../../components/footer"
import Header from "../../components/header"
import FooterBrand from "../../components/footerBrand"
import { strapi, strapiApi } from "../../models/content"
import { Course } from "../../models/courses"
import { Data, ResponseData } from "../../models/data"
import { VideoPlayer } from '../../components/video-player';
import { useState } from "react"

export default function Library(course: Data<Course>) {
  // mockUserId: string = '123';
  // mockVideoId: string = '6b9c94923b3b25dffbdcd69febb5b846';
    const { id, attributes } = course;
    const [ mockmockVideoIdUserId, setMockVideoId ] = useState('6b9c94923b3b25dffbdcd69febb5b846');
    const [ mockUserId, setmockUserId ] = useState('123');
    console.log(course);
    

    return (
        <>
        <header>
          <title>Cloudflare Stream with Google Analytic</title>
          <meta name="description" content="Generated by create next app"/>
          <link rel="icon" href="/favicon.ico"/>
          <script
            async
            src={`https://www.googletagmanager.com/gtag/js?id=${process.env.NEXT_PUBLIC_GOOGLE_ANALYTIC_ID}`}/>
          <script dangerouslySetInnerHTML={{
            __html: `
            <!-- Global site tag (gtag.js) - Google Analytics -->
            window.dataLayer = window.dataLayer || [];
            function gtag(){dataLayer.push(arguments);}
            gtag('js', new Date());
            gtag('set', 'user_properties', { 'user_id_dimension': '${mockUserId}' });
            gtag('config', '${process.env.NEXT_PUBLIC_GOOGLE_ANALYTIC_ID}', { 'debug_mode':true , 'user_id': '${mockUserId}' });
          `
          }}/>
        </header>
        <Header />
        <div className="container">
          <div>
            <div>{attributes?.description}</div>
            <VideoPlayer key={mockmockVideoIdUserId} videoId={mockmockVideoIdUserId}/>
          </div>
          <div>
            Asset Download
            {/* { attributes.asset_download } */}
            <button>Download Asset</button>
          </div>
        </div>
        </>
    );
};


export async function getStaticProps(context: any) {
    const { params } = context
    const response = await fetch(strapiApi + "/courses/" + params.cid + "?populate=*");
    const course = await response.json();
    return {
      props: {
        ...course.data
      },
    }
  }

export async function getStaticPaths() {
    const allPosts = await getAllCourses()
    const paths = allPosts?.map((course: Data<Course>) => {    
        return {
            params: {
                cid: course.id ,
            },
        }
    }) || []

    return {
        paths: paths,
        fallback: true,
    }
}

async function getAllCourses(): Promise<any> {
    try {
        const response = await fetch(strapiApi + "/courses?populate=*");
        const data = await response.json() as ResponseData<Course>;
        return await response.json();
      } catch (error) {
        console.error(error);
      }
}